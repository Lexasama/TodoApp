{"version":3,"file":"ApiHelper.js","sourceRoot":"","sources":["../src/api/ApiHelper.ts"],"names":[],"mappings":"AAAA,KAAK,UAAU,WAAW,CAAC,IAAS;IAChC,IAAI,IAAI,CAAC,EAAE,EAAE;QACX,OAAO,IAAI,CAAC;KACb;IAED,IAAI,QAAQ,GAAG,SAAS,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,UAAU,GAAG,CAAC;IAC3D,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;IACrC,IAAI,UAAU,EAAE;QACd,QAAQ,GAAG,GAAG,QAAQ,KAAK,UAAU,EAAE,CAAC;KACzC;IAED,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;IAClC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC;IACrB,MAAM,KAAK,CAAC;AACd,CAAC;AAED,KAAK,UAAU,MAAM,CAAC,IAAS;IAC7B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;IACjC,IAAI,MAAM;QAAE,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AACxC,CAAC;AAED,KAAK,UAAU,IAAI,CACjB,GAAW,EACX,MAAyC,EACzC,IAAa,EACb,WAAoB;IAEpB,MAAM,OAAO,GAAQ;QACnB,MAAM,EAAE,MAAM;QACd,OAAO,EAAE,EAAE;QACX,IAAI,EAAE,MAAM;KACb,CAAC;IACF,IAAI,IAAI,EAAE;QACR,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;KACrC;IACD,IAAI,WAAW,EAAE;QACf,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,WAAW,CAAC;KAC/C;IACD,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAEzC,MAAM,WAAW,CAAC,MAAM,CAAC,CAAC;IAC1B,OAAO,MAAM,MAAM,CAAC,MAAM,CAAC,CAAC;AAC9B,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,GAAW,EAAE,IAAU;IAC/C,OAAO,IAAI,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,kBAAkB,CAAC,CAAC;AACrD,CAAC;AACD,MAAM,UAAU,QAAQ,CAAC,GAAW,EAAE,IAAS;IAC7C,OAAO,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,kBAAkB,CAAC,CAAC;AACpD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,QAAQ,CAAC,GAAW;IACxC,OAAO,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AAC1B,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,GAAW;IACrC,OAAO,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AAC7B,CAAC","sourcesContent":["async function checkErrors(resp: any) {\r\n    if (resp.ok) {\r\n      return resp;\r\n    }\r\n  \r\n    let errorMsg = `ERROR ${resp.status} (${resp.statusText})`;\r\n    const serverText = await resp.text();\r\n    if (serverText) {\r\n      errorMsg = `${errorMsg}: ${serverText}`;\r\n    }\r\n  \r\n    const error = new Error(errorMsg);\r\n    error.message = resp;\r\n    throw error;\r\n  }\r\n  \r\n  async function toJSON(resp: any) {\r\n    const result = await resp.text();\r\n    if (result) return JSON.parse(result);\r\n  }\r\n  \r\n  async function send(\r\n    url: string,\r\n    method: 'GET' | 'POST' | 'DELETE' | 'PUT',\r\n    data?: string,\r\n    contentType?: string\r\n  ) {\r\n    const options: any = {\r\n      method: method,\r\n      headers: {},\r\n      mode: 'cors',\r\n    };\r\n    if (data) {\r\n      options.body = JSON.stringify(data);\r\n    }\r\n    if (contentType) {\r\n      options.headers['Content-Type'] = contentType;\r\n    }\r\n    const result = await fetch(url, options);\r\n  \r\n    await checkErrors(result);\r\n    return await toJSON(result);\r\n  }\r\n  \r\n  export function postAsync(url: string, data?: any) {\r\n    return send(url, 'POST', data, 'application/JSON');\r\n  }\r\n  export function putAsync(url: string, data: any) {\r\n    return send(url, 'PUT', data, 'application/json');\r\n  }\r\n  \r\n  export async function getAsync(url: string) {\r\n    return send(url, 'GET');\r\n  }\r\n  \r\n  export function deleteAsync(url: string) {\r\n    return send(url, 'DELETE');\r\n  }\r\n  "]}